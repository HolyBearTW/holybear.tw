permissions:
  contents: write
  actions: read

name: ÈÉ®ÁΩ≤ VitePress ÈùúÊÖãÁ∂≤Á´ôÂà∞ GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  full-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: ÈÅ∑Âá∫Á®ãÂºèÁ¢º
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ÈÉ®Â±¨Êó•Ë™å
        run: |
          deleted_any=0
          for en_file in en/blog/*.md; do
            [ ! -f "$en_file" ] && continue
            base_file="blog/$(basename "$en_file")"
            if [ ! -f "$base_file" ]; then
              git rm "$en_file"
              echo "Deleted $en_file (orphan)"
              deleted_any=1
            fi
          done
          if [ $deleted_any -eq 1 ]; then
            git config --global user.name 'System Administrator'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git commit -am "chore: sync delete en/blog files"
            git pull --rebase origin main
            git push || git push --force
          else
            echo "No en/blog files to delete."
          fi

      - name: Ë®≠ÂÆö Node.js ËàáÂø´Âèñ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: ÂÆâË£ùÁõ∏‰æùÂ•ó‰ª∂
        run: yarn install

      - name: Áî¢Áîü‰ΩúËÄÖÊ∏ÖÂñÆ
        run: node .vitepress/components/generateAuthors.cjs

      - name: Áî¢ÁîüÂÅ¥ÈÇäÊ¨Ñ
        run: node .vitepress/components/generateSidebar.cjs

      - name: amend sidebar ÈÄ≤ÊúÄÊñ∞ commitÔºàÂ¶ÇÊúâËÆäÊõ¥Ôºâ
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .vitepress/sidebar.generated.ts .vitepress/sidebar.generated.en.ts .vitepress/theme/authors.json
          if git diff --cached --quiet; then
            echo "Ê≤íÊúâ sidebar Êàñ authors ËÆäÊõ¥ÔºåÁÑ°ÈúÄ amend"
          else
            git commit --amend --no-edit
            git push --force-with-lease
            echo "Â∑≤ amend sidebar / authors ÈÄ≤ÂéüÊú¨ commit"
          fi

      - name: Commit ‰∏¶ push yarn.lock
        run: |
          git config --global user.name 'System Administrator'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if git diff --quiet yarn.lock; then
            echo "No changes to yarn.lock."
          else
            git add yarn.lock
            git commit -m "chore: update yarn.lock [bot]"
            git pull --rebase origin main
            git push || git push --force
          fi

      - name: ÂÇô‰ªΩ„ÄÅÁî¢Áîü„ÄÅÈÇÑÂéü‰∏¶ÈÅû‰∫§Ëã±Êñá Blog Ê™îÊ°à
        shell: /usr/bin/bash -e {0}
        run: |
          # --- ÈöéÊÆµ 1: ÂÇô‰ªΩÊâÄÊúâÂ∑≤Â≠òÂú®ÁöÑËã±ÊñáÊ™îÊ°à ---
          BACKUP_DIR="tmp_existing_en_files"
          mkdir -p "$BACKUP_DIR"
          echo "=> ÈöéÊÆµ 1: ÂÇô‰ªΩÊâÄÊúâÂ∑≤Â≠òÂú®ÁöÑËã±ÊñáÊñáÁ´†..."

          # Ê™¢Êü• en/blog ÁõÆÈåÑÊòØÂê¶Â≠òÂú®‰∏îÊúâÊ™îÊ°à
          if [ -d "en/blog" ] && [ -n "$(ls -A en/blog/*.md 2>/dev/null)" ]; then
            echo "    - ÁôºÁèæÂ∑≤Â≠òÂú®ÁöÑÊ™îÊ°àÔºåÊ≠£Âú®ÁßªËá≥Êö´Â≠òÂçÄ‰ª•ÈÅøÂÖçË¢´Ë¶ÜËìã..."
            mv en/blog/*.md "$BACKUP_DIR/"
          else
            echo "    - en/blog/ ÁõÆÈåÑÁÇ∫Á©∫Êàñ‰∏çÂ≠òÂú®ÔºåÁÑ°ÈúÄÂÇô‰ªΩ„ÄÇ"
          fi

          # --- ÈöéÊÆµ 2: Áî¢ÁîüÈÅûË£úÊ™îÊ°à ---
          echo "=> ÈöéÊÆµ 2: Âü∑Ë°åÈÅûË£úÊ™îÊ°àÁî¢ÁîüÁ®ãÂ∫è (yarn gen-en-blog)..."
          yarn gen-en-blog
          echo "    - Áî¢ÁîüÁ®ãÂ∫èÂÆåÊàê„ÄÇ"

          # --- ÈöéÊÆµ 3: ÈÇÑÂéüÂÇô‰ªΩÁöÑÊ™îÊ°à ---
          echo "=> ÈöéÊÆµ 3: ÈÇÑÂéüÂÖàÂâçÂ∑≤Â≠òÂú®ÁöÑËã±ÊñáÊ™îÊ°à..."
          if [ -n "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
            mv -f "$BACKUP_DIR"/* en/blog/
            echo "    - Â∑≤ÈÇÑÂéüÂÇô‰ªΩÁöÑÊ™îÊ°à„ÄÇ"
          else
            echo "    - Ê≤íÊúâÈúÄË¶ÅÈÇÑÂéüÁöÑÊ™îÊ°à„ÄÇ"
          fi
          rm -rf "$BACKUP_DIR"

          # --- ÈöéÊÆµ 4: Commit ‰∏¶ Push ËÆäÊõ¥ ---
          echo "=> ÈöéÊÆµ 4: Ê™¢Êü•ÊòØÂê¶ÊúâÊñ∞Ê™îÊ°àÈúÄË¶ÅÊèê‰∫§..."
          git config --global user.name 'System Administrator'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add en/blog/

          if git diff --cached --quiet; then
            echo "    - Ê≤íÊúâÊñ∞Áî¢ÁîüÁöÑÈÅûË£úÊ™îÊ°àÈúÄË¶ÅÊèê‰∫§„ÄÇ"
          else
            echo "    - ÂÅµÊ∏¨Âà∞Êñ∞Áî¢ÁîüÁöÑÈÅûË£úÊ™îÊ°àÔºåÊ≠£Âú®Êèê‰∫§..."
            git commit -m "chore: auto-generate en blog placeholders"
            git pull --rebase origin main
            git push --set-upstream origin main || git push
            echo "    - Êñ∞Ê™îÊ°àÂ∑≤ÊàêÂäüÊèê‰∫§„ÄÇ"
          fi

      - name: Ê∏ÖÈô§ Vite/VitePress Âø´Âèñ
        run: |
          rm -rf .vitepress/.cache .vitepress/dist .vite node_modules/.vite

      - name: Âª∫ÁΩÆ VitePress Á∂≤Á´ô
        run: yarn run build

      - name: ÈÉ®ÁΩ≤Âà∞ GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: .vitepress/dist
          clean: true

      - name: ÂÅµÊ∏¨Êñ∞ÊñáÁ´†
        id: detect-new-files
        run: |
          TARGET_DIR="blog/"
          CURRENT_SHA="${{ github.sha }}"

          # ÂòóË©¶Áî® github.event.beforeÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®Ââá fallback Áî® CURRENT_SHA~1 ÂÜç fallback Á©∫Â≠ó‰∏≤
          if [ -n "${{ github.event.before }}" ] && git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
            LAST_COMMIT_SHA="${{ github.event.before }}"
          elif git cat-file -e "${CURRENT_SHA}~1" 2>/dev/null; then
            LAST_COMMIT_SHA="$(git rev-parse "${CURRENT_SHA}~1")"
          else
            LAST_COMMIT_SHA=""
          fi

          OUTPUT_FILE="new_post_files.txt"
          DETECTED_FILES=""

          # ‰øÆÊ≠£ diff ÊØîËºÉÈÇèËºØÔºåÈÅøÂÖçÁ©∫ SHA Ëàá‰∏çÂ≠òÂú® SHA Â∞éËá¥Âá∫ÈåØ
          if [ -z "$LAST_COMMIT_SHA" ] || [ "$LAST_COMMIT_SHA" = "0000000000000000000000000000000000000000" ]; then
            # fallback: Âè™ÊØîÂ∞ç HEAD Êñ∞Â¢ûÊ™îÊ°à
            DETECTED_FILES=$(git diff --name-only --diff-filter=A "${CURRENT_SHA}" -- "$TARGET_DIR")
          else
            DETECTED_FILES=$(git diff --name-only --diff-filter=A "${LAST_COMMIT_SHA}" "${CURRENT_SHA}" -- "$TARGET_DIR")
          fi

          echo "$DETECTED_FILES" | grep . > "$OUTPUT_FILE" || true
          if [ -s "$OUTPUT_FILE" ]; then
            echo "ÂÅµÊ∏¨Âà∞Êñ∞ÊñáÁ´†ÔºåÂàóË°®Â∑≤ÂÑ≤Â≠òËá≥ $OUTPUT_FILE"
            echo "has_new_files=true" >> $GITHUB_ENV
          else
            echo "Ê≤íÊúâÂÅµÊ∏¨Âà∞Êñ∞ÊñáÁ´†"
            echo "has_new_files=false" >> $GITHUB_ENV
          fi

      - name: ËôïÁêÜ‰∏¶ÁôºÈÄÅ Telegram ÈÄöÁü•
        if: env.has_new_files == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ORIGINAL_COMMIT: ${{ github.sha }}
        run: |
          set -e
          NEW_POST_FILES=$(cat new_post_files.txt)
          if [ -z "$NEW_POST_FILES" ]; then
            echo "ÊñáÁ´†ÂàóË°®ÁÇ∫Á©∫Ôºå‰∏≠Ê≠¢Âü∑Ë°å„ÄÇ"
            exit 0
          fi
          BASE_URL="https://holybear.me"
          escape_markdownv2() {
            printf "%s" "$1" | sed -e 's/[\\_*\[\]()~`>#+\-=|{}.!]/\\&/g'
          }
          for file_path in $NEW_POST_FILES; do
            echo "Processing file: $file_path"
            file_content=$(cat "$file_path")
            TITLE=$(echo "$file_content" | awk -F': ' '/^title:/ {print $2; exit}')
            if [ -z "$TITLE" ]; then
              TITLE=$(echo "$file_content" | awk -F'# ' '/^# / {print $2; exit}')
            fi
            [ -z "$TITLE" ] && TITLE="ÁÑ°Ê®ôÈ°åÊñáÁ´†"
            CATEGORY=""
            CATEGORY=$(echo "$file_content" | grep -A 1 -iE '^\s*category:' | grep -E '^\s*-\s*' | head -n1 | sed -E 's/^\s*-\s*(.*)/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*\[.*\]' | sed -E 's/.*\[\s*([^, ]*).*/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*[^-\[]+' | head -n1 | sed -E 's/^\s*category:\s*//')
            CATEGORY=$(echo "$CATEGORY" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | sed -E 's/[\x27"\/]//g')
            if [ -n "$CATEGORY" ]; then
              TITLE="„Äê${CATEGORY}„Äë${TITLE}"
            fi
            ARTICLE_SLUG=$(echo "$file_path" | sed -E 's|^blog/(.*)\.md$|\1|')
            ARTICLE_URL="${BASE_URL}/blog/${ARTICLE_SLUG}"
            COMMIT_MESSAGE=$(git log -1 --pretty=%B "$ORIGINAL_COMMIT")
            AUTHOR_NAME=$(git log -1 --pretty=%an "$ORIGINAL_COMMIT")
            ESCAPED_TITLE=$(escape_markdownv2 "$TITLE")
            ESCAPED_COMMIT_MESSAGE=$(escape_markdownv2 "$COMMIT_MESSAGE")
            ESCAPED_AUTHOR_NAME=$(escape_markdownv2 "$AUTHOR_NAME")
            MESSAGE=$'*üì¢ New push to GitHub*\n'
            MESSAGE+=$'*'"${ESCAPED_TITLE}"$'*\n'
            MESSAGE+=$'```commit\n'"${ESCAPED_COMMIT_MESSAGE}"$'\n```'
            MESSAGE+=$'‚û°Ô∏è [ÈªûÊ≠§Èñ±ËÆÄÊñáÁ´†]('"${ARTICLE_URL}"$')\n'
            MESSAGE+='by `'"${ESCAPED_AUTHOR_NAME}"'`'
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
              --data-urlencode "text=${MESSAGE}" \
              --data-urlencode "parse_mode=MarkdownV2")
            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "‚úÖ Telegram ÈÄöÁü•Â∑≤ÊàêÂäüÁôºÈÄÅÔºö$file_path"
            else
              echo "‚ùå ÁÑ°Ê≥ïÁôºÈÄÅ Telegram ÈÄöÁü•Ôºö$file_path"
              echo "Telegram API ÂõûÊáâÔºö$RESPONSE"
            fi
            done
