permissions:
  contents: write
  actions: read

name: 部署 VitePress 靜態網站到 GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  full-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: 遷出程式碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 部屬日誌
        run: |
          deleted_any=0
          for en_file in en/blog/*.md; do
            [ ! -f "$en_file" ] && continue
            base_file="blog/$(basename "$en_file")"
            if [ ! -f "$base_file" ]; then
              git rm "$en_file"
              echo "Deleted $en_file (orphan)"
              deleted_any=1
            fi
          done
          if [ $deleted_any -eq 1 ]; then
            git config --global user.name 'System Administrator'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git commit -am "chore: sync delete en/blog files"
            git pull --rebase origin main
            git push || git push --force
          else
            echo "No en/blog files to delete."
          fi

      - name: 設定 Node.js 與快取
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 安裝相依套件
        run: yarn install

      - name: 產生作者清單
        run: node .vitepress/components/generateAuthors.cjs

      - name: 產生側邊欄
        run: node .vitepress/components/generateSidebar.cjs

      - name: amend sidebar 進最新 commit（如有變更）
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .vitepress/sidebar.generated.ts .vitepress/sidebar.generated.en.ts .vitepress/theme/authors.json
          if git diff --cached --quiet; then
            echo "沒有 sidebar 或 authors 變更，無需 amend"
          else
            git commit --amend --no-edit
            git push --force-with-lease
            echo "已 amend sidebar / authors 進原本 commit"
          fi

      - name: Commit 並 push yarn.lock
        run: |
          git config --global user.name 'System Administrator'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if git diff --quiet yarn.lock; then
            echo "No changes to yarn.lock."
          else
            git add yarn.lock
            git commit -m "chore: update yarn.lock [bot]"
            git pull --rebase origin main
            git push || git push --force
          fi

      - name: 備份、產生、還原並遞交英文 Blog 檔案
        shell: /usr/bin/bash -e {0}
        run: |
          # --- 階段 1: 備份所有已存在的英文檔案 ---
          BACKUP_DIR="tmp_existing_en_files"
          mkdir -p "$BACKUP_DIR"
          echo "=> 階段 1: 備份所有已存在的英文文章..."

          # 檢查 en/blog 目錄是否存在且有檔案
          if [ -d "en/blog" ] && [ -n "$(ls -A en/blog/*.md 2>/dev/null)" ]; then
            echo "    - 發現已存在的檔案，正在移至暫存區以避免被覆蓋..."
            mv en/blog/*.md "$BACKUP_DIR/"
          else
            echo "    - en/blog/ 目錄為空或不存在，無需備份。"
          fi

          # --- 階段 2: 產生遞補檔案 ---
          echo "=> 階段 2: 執行遞補檔案產生程序 (yarn gen-en-blog)..."
          yarn gen-en-blog
          echo "    - 產生程序完成。"

          # --- 階段 3: 還原備份的檔案 ---
          echo "=> 階段 3: 還原先前已存在的英文檔案..."
          if [ -n "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
            mv -f "$BACKUP_DIR"/* en/blog/
            echo "    - 已還原備份的檔案。"
          else
            echo "    - 沒有需要還原的檔案。"
          fi
          rm -rf "$BACKUP_DIR"

          # --- 階段 4: Commit 並 Push 變更 ---
          echo "=> 階段 4: 檢查是否有新檔案需要提交..."
          git config --global user.name 'System Administrator'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add en/blog/

          if git diff --cached --quiet; then
            echo "    - 沒有新產生的遞補檔案需要提交。"
          else
            echo "    - 偵測到新產生的遞補檔案，正在提交..."
            git commit -m "chore: auto-generate en blog placeholders"
            git pull --rebase origin main
            git push --set-upstream origin main || git push
            echo "    - 新檔案已成功提交。"
          fi

      - name: 清除 Vite/VitePress 快取
        run: |
          rm -rf .vitepress/.cache .vitepress/dist .vite node_modules/.vite

      - name: 建置 VitePress 網站
        run: yarn run build

      - name: 還原 git user 設定
        run: |
          git config --global --unset user.name || true
          git config --global --unset user.email || true

      - name: 部署到 GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: .vitepress/dist
          clean: true

      - name: 偵測新文章
        id: detect-new-files
        run: |
          TARGET_DIR="blog/"
          CURRENT_SHA="${{ github.sha }}"

          is_null_sha() {
            [ -z "$1" ] || [[ "$1" =~ ^0{40}$ ]]
          }

          if [ -n "${{ github.event.before }}" ] && git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
            LAST_COMMIT_SHA="${{ github.event.before }}"
          elif git cat-file -e "${CURRENT_SHA}~1" 2>/dev/null; then
            LAST_COMMIT_SHA="$(git rev-parse "${CURRENT_SHA}~1")"
          else
            LAST_COMMIT_SHA=""
          fi

          OUTPUT_FILE="new_post_files.txt"
          DETECTED_FILES=""

          if is_null_sha "$LAST_COMMIT_SHA"; then
            DETECTED_FILES=$(git diff --name-only --diff-filter=A "${CURRENT_SHA}" -- "$TARGET_DIR")
          else
            DETECTED_FILES=$(git diff --name-only --diff-filter=A "${LAST_COMMIT_SHA}" "${CURRENT_SHA}" -- "$TARGET_DIR")
          fi

          echo "$DETECTED_FILES" | grep . > "$OUTPUT_FILE" || true
          if [ -s "$OUTPUT_FILE" ]; then
            echo "偵測到新文章，列表已儲存至 $OUTPUT_FILE"
            echo "has_new_files=true" >> $GITHUB_ENV
          else
            echo "沒有偵測到新文章"
            echo "has_new_files=false" >> $GITHUB_ENV
          fi

      - name: 處理並發送 Telegram 通知
        if: env.has_new_files == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ORIGINAL_COMMIT: ${{ github.sha }}
        run: |
            set -e
            NEW_POST_FILES=$(cat new_post_files.txt)
            if [ -z "$NEW_POST_FILES" ]; then
            echo "文章列表為空，中止執行。"
            exit 0
            fi
            BASE_URL="https://holybear.me"
            escape_markdownv2() {
            printf "%s" "$1" | sed -e 's/[\\_*\[\]()~`>#+\-=|{}.!]/\\&/g'
            }

            for file_path in $NEW_POST_FILES; do
            echo "Processing file: $file_path"
    
            file_content=$(cat "$file_path")
            TITLE=$(echo "$file_content" | awk -F': ' '/^title:/ {print $2; exit}')
            if [ -z "$TITLE" ]; then
            TITLE=$(echo "$file_content" | awk -F'# ' '/^# / {print $2; exit}')
            fi
            [ -z "$TITLE" ] && TITLE="無標題文章"
            CATEGORY=""
            CATEGORY=$(echo "$file_content" | grep -A 1 -iE '^\s*category:' | grep -E '^\s*-\s*' | head -n1 | sed -E 's/^\s*-\s*(.*)/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*\[.*\]' | sed -E 's/.*\[\s*([^, ]*).*/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*[^-\[]+' | head -n1 | sed -E 's/^\s*category:\s*//')
            CATEGORY=$(echo "$CATEGORY" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | sed -E 's/[\x27"\/]//g')
            if [ -n "$CATEGORY" ]; then
            TITLE="【${CATEGORY}】${TITLE}"
            fi
            ARTICLE_SLUG=$(echo "$file_path" | sed -E 's|^blog/(.*)\.md$|\1|')
            ARTICLE_URL="${BASE_URL}/blog/${ARTICLE_SLUG}"
    
            # ✨ START: 新增的等待檢查邏輯 ✨
            echo "等待日誌網址生效：${ARTICLE_URL}"
            timeout=180 # 最長等待 180 秒 (3 分鐘)
            interval=20 # 每 20 秒檢查一次
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
            # 使用 curl 檢查 HTTP 狀態碼
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "${ARTICLE_URL}")
            if [ "$response_code" -eq 200 ]; then
              echo "✅ 日誌已上線！"
            break
            fi
              echo "日誌網址尚未生效 (HTTP ${response_code})，等待 ${interval} 秒…"
            sleep $interval
            elapsed=$((elapsed + interval))
            done

            # 如果超時後網址仍然無法訪問，則跳過此檔案的通知
            if [ $elapsed -ge $timeout ]; then
              echo "❌ 等待日誌網址生效已逾時，跳過以下通知：$file_path"
            continue # 繼續處理下一個檔案
            fi
            # ✨ END: 新增的等待檢查邏輯 ✨

            COMMIT_MESSAGE=$(git log -1 --pretty=%B "$ORIGINAL_COMMIT")
            AUTHOR_NAME=$(git log -1 --pretty=%an "$ORIGINAL_COMMIT")
            ESCAPED_TITLE=$(escape_markdownv2 "$TITLE")
            ESCAPED_COMMIT_MESSAGE=$(escape_markdownv2 "$COMMIT_MESSAGE")
            ESCAPED_AUTHOR_NAME=$(escape_markdownv2 "$AUTHOR_NAME")
    
            MESSAGE=$'*📢 New push to GitHub*\n'
            MESSAGE+=$'*'"${ESCAPED_TITLE}"$'*\n'
            MESSAGE+=$'```commit\n'"${ESCAPED_COMMIT_MESSAGE}"$'\n```'
            MESSAGE+=$'➡️ [點此閱讀文章]('"${ARTICLE_URL}"$')\n'
            MESSAGE+='by `'"${ESCAPED_AUTHOR_NAME}"'`'
    
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text=${MESSAGE}" \
            --data-urlencode "parse_mode=MarkdownV2" \
            --data-urlencode "disable_web_page_preview=false") # 確保這裡設為 false
      
            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "✅ Telegram 通知已成功發送：$file_path"
            else
              echo "❌ 無法發送 Telegram 通知：$file_path"
              echo "Telegram API 回應：$RESPONSE"
            fi
            done
